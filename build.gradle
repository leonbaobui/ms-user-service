buildscript {
    repositories {
        maven {
            url = uri("https://plugins.gradle.org/m2/")
        }
    }
    dependencies {
//        classpath("gradle.plugin.org.flywaydb:gradle-plugin-publishing:10.7.1")
        classpath("org.postgresql:postgresql:42.7.1")
        classpath("org.flywaydb:flyway-database-postgresql:10.4.1")
    }
}

plugins {
    id 'java'
    id 'com.github.davidmc24.gradle.plugin.avro' version '1.8.0'
    id 'org.springframework.boot' version '3.2.2'
    id 'io.spring.dependency-management' version '1.1.4'
    id "org.flywaydb.flyway" version "9.22.3"
    id 'checkstyle'
    id 'pmd'
    id 'com.avast.gradle.docker-compose' version '0.14.11'
}

repositories {
    maven {
        url "https://packages.confluent.io/maven/"
    }
    flatDir {
        dirs 'libs'
    }
}


group = 'com.twitter'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}


repositories {
    mavenCentral()
    maven {
        url = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
    }
}


sourceSets {
    main.java.srcDirs += "${buildDir}/generated/avro"
    main.java.srcDirs += "build/generated/sources/annotationProcessor/java/main"
}

tasks.named('generateAvroJava') {
    source("${projectDir}/src/main/avro")
    outputDir = file("${projectDir}/src/main/java/")
}

compileJava.dependsOn(generateAvroJava)

dependencies {
//	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
//	implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.neo4j:neo4j-ogm:4.0.16'
    implementation 'org.springframework.boot:spring-boot-starter-web:3.2.0'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.2.0'
    implementation 'org.springframework.boot:spring-boot-starter-data-neo4j:3.2.4'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:4.1.0'

    implementation 'io.github.resilience4j:resilience4j-circuitbreaker:2.1.0'
    implementation 'io.github.resilience4j:resilience4j-annotations:2.1.0'
    implementation 'org.springframework.boot:spring-boot-devtools:3.2.2'

    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:4.1.0'
    implementation 'org.springframework.boot:spring-boot-starter-validation:3.2.1'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-amqp', version: '3.2.1'
    implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
    implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
    implementation 'org.postgresql:postgresql:42.7.1'
    implementation 'org.springframework.kafka:spring-kafka:3.1.1'
    implementation 'org.apache.avro:avro-maven-plugin:1.12.0'
    implementation 'org.apache.avro:avro:1.11.0'
    implementation 'io.confluent:kafka-avro-serializer:7.5.3'
    implementation files("libs/lib-trans-outbox-0.0.1-SNAPSHOT-plain.jar")
    implementation 'org.springframework.security:spring-security-crypto'

    implementation 'org.springframework.boot:spring-boot-starter-actuator:3.2.1'

    implementation 'com.fasterxml.jackson.core:jackson-annotations'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.core:jackson-core'

    implementation 'org.springframework.boot:spring-boot-starter-data-redis:3.2.1'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client:3.2.4'
    implementation 'org.springframework.boot:spring-boot-starter-security:3.2.4'

    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
    annotationProcessor "org.mapstruct:mapstruct-processor:1.4.2.Final"
    implementation "org.mapstruct:mapstruct:1.4.2.Final"
    implementation 'org.modelmapper:modelmapper:3.1.1'
    implementation 'io.github.leonbaobui:common-lib:0.0.8-SNAPSHOT'


//    implementation project(':lib')
//    annotationProcessor(project(":lib"))

    implementation 'org.flywaydb:flyway-core:10.6.0'
    implementation 'org.flywaydb:flyway-database-postgresql:10.4.1'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

avro {
    stringType = "String"
    fieldVisibility = "PUBLIC"
    createSetters = true
}

checkstyle {
    toolVersion '7.8.1'
    configFile file("${rootDir}/config/checkstyle/checkstyle.xml")
    ignoreFailures = true
}
checkstyleMain {
    source = 'src/main/java'
}
checkstyleTest {
    source = 'src/test/java'
}

pmd {
    toolVersion = "6.35.0"                             // The version of PMD to use.
    ruleSetFiles = files("config/pmd/pmd.xml")         // The location of the configuration file.
//    ruleSets = ['java-basic']
    ruleSets = [] // Ignore the default rules. The ones this config
    // uses are set with the ruleSetFiles property.
    sourceSets = [sourceSets.main]
    reportsDir = file("$buildDir/reports/pmd")
    ignoreFailures = true
}

dockerCompose {
    useComposeFiles = ["${rootProject.projectDir}/src/main/resources/docker/docker-compose.yml"]
}

def dbUrl = System.getenv('POSTGRESQL_URL')
def dbUser = System.getenv('POSTGRESQL_USERNAME')
def dbPassword = System.getenv('POSTGRESQL_PASSWORD')


flyway {
    url = 'jdbc:postgresql://ep-cold-mud-a1zdq33b-pooler.ap-southeast-1.aws.neon.tech/ms_user_service?sslmode=require'
    user = System.getenv('POSTGRESQL_USERNAME')
    password = System.getenv('POSTGRESQL_PASSWORD')

    schemas = ['public']
    locations = ['classpath:db/migration/migrate/ms-user-service'] // The location of your migration scripts
    cleanDisabled = false
}

