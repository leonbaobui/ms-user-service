/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.twitter.ms.event;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class UserEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3115214818538247365L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"UserEvent\",\"namespace\":\"com.twitter.ms.event\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"about\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"activationCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"active\",\"type\":\"boolean\",\"default\":false},{\"name\":\"avatar\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"backgroundColor\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"DEFAULT\"},{\"name\":\"colorScheme\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"BLUE\"},{\"name\":\"birthday\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"country\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"countryCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"email\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"fullName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"gender\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"language\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"likeCount\",\"type\":\"int\",\"default\":0},{\"name\":\"location\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"mediaTweetCount\",\"type\":\"long\",\"default\":0},{\"name\":\"mutedDirectMessages\",\"type\":\"boolean\",\"default\":false},{\"name\":\"notificationsCount\",\"type\":\"long\",\"default\":0},{\"name\":\"mentionsCount\",\"type\":\"long\",\"default\":0},{\"name\":\"password\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"passwordResetCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"phone\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"pinnedTweetId\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"privateProfile\",\"type\":\"boolean\",\"default\":false},{\"name\":\"profileCustomized\",\"type\":\"boolean\",\"default\":false},{\"name\":\"profileStarted\",\"type\":\"boolean\",\"default\":false},{\"name\":\"registrationDate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"logicalType\":\"timestamp-millis\"},{\"name\":\"role\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"USER\"},{\"name\":\"authenticationProvider\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"tweetCount\",\"type\":\"long\",\"default\":0},{\"name\":\"unreadMessagesCount\",\"type\":\"long\",\"default\":0},{\"name\":\"username\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"wallpaper\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"website\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"createdAt\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"logicalType\":\"timestamp-millis\"},{\"name\":\"updatedAt\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"logicalType\":\"timestamp-millis\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<UserEvent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<UserEvent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<UserEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<UserEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<UserEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this UserEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a UserEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a UserEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static UserEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  public long id;
  public java.lang.String about;
  public java.lang.String activationCode;
  public boolean active;
  public java.lang.String avatar;
  public java.lang.String backgroundColor;
  public java.lang.String colorScheme;
  public java.lang.String birthday;
  public java.lang.String country;
  public java.lang.String countryCode;
  public java.lang.String email;
  public java.lang.String fullName;
  public java.lang.String gender;
  public java.lang.String language;
  public int likeCount;
  public java.lang.String location;
  public long mediaTweetCount;
  public boolean mutedDirectMessages;
  public long notificationsCount;
  public long mentionsCount;
  public java.lang.String password;
  public java.lang.String passwordResetCode;
  public java.lang.Long phone;
  public java.lang.Long pinnedTweetId;
  public boolean privateProfile;
  public boolean profileCustomized;
  public boolean profileStarted;
  public java.lang.String registrationDate;
  public java.lang.String role;
  public java.lang.String authenticationProvider;
  public long tweetCount;
  public long unreadMessagesCount;
  public java.lang.String username;
  public java.lang.String wallpaper;
  public java.lang.String website;
  public java.lang.String createdAt;
  public java.lang.String updatedAt;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public UserEvent() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param about The new value for about
   * @param activationCode The new value for activationCode
   * @param active The new value for active
   * @param avatar The new value for avatar
   * @param backgroundColor The new value for backgroundColor
   * @param colorScheme The new value for colorScheme
   * @param birthday The new value for birthday
   * @param country The new value for country
   * @param countryCode The new value for countryCode
   * @param email The new value for email
   * @param fullName The new value for fullName
   * @param gender The new value for gender
   * @param language The new value for language
   * @param likeCount The new value for likeCount
   * @param location The new value for location
   * @param mediaTweetCount The new value for mediaTweetCount
   * @param mutedDirectMessages The new value for mutedDirectMessages
   * @param notificationsCount The new value for notificationsCount
   * @param mentionsCount The new value for mentionsCount
   * @param password The new value for password
   * @param passwordResetCode The new value for passwordResetCode
   * @param phone The new value for phone
   * @param pinnedTweetId The new value for pinnedTweetId
   * @param privateProfile The new value for privateProfile
   * @param profileCustomized The new value for profileCustomized
   * @param profileStarted The new value for profileStarted
   * @param registrationDate The new value for registrationDate
   * @param role The new value for role
   * @param authenticationProvider The new value for authenticationProvider
   * @param tweetCount The new value for tweetCount
   * @param unreadMessagesCount The new value for unreadMessagesCount
   * @param username The new value for username
   * @param wallpaper The new value for wallpaper
   * @param website The new value for website
   * @param createdAt The new value for createdAt
   * @param updatedAt The new value for updatedAt
   */
  public UserEvent(java.lang.Long id, java.lang.String about, java.lang.String activationCode, java.lang.Boolean active, java.lang.String avatar, java.lang.String backgroundColor, java.lang.String colorScheme, java.lang.String birthday, java.lang.String country, java.lang.String countryCode, java.lang.String email, java.lang.String fullName, java.lang.String gender, java.lang.String language, java.lang.Integer likeCount, java.lang.String location, java.lang.Long mediaTweetCount, java.lang.Boolean mutedDirectMessages, java.lang.Long notificationsCount, java.lang.Long mentionsCount, java.lang.String password, java.lang.String passwordResetCode, java.lang.Long phone, java.lang.Long pinnedTweetId, java.lang.Boolean privateProfile, java.lang.Boolean profileCustomized, java.lang.Boolean profileStarted, java.lang.String registrationDate, java.lang.String role, java.lang.String authenticationProvider, java.lang.Long tweetCount, java.lang.Long unreadMessagesCount, java.lang.String username, java.lang.String wallpaper, java.lang.String website, java.lang.String createdAt, java.lang.String updatedAt) {
    this.id = id;
    this.about = about;
    this.activationCode = activationCode;
    this.active = active;
    this.avatar = avatar;
    this.backgroundColor = backgroundColor;
    this.colorScheme = colorScheme;
    this.birthday = birthday;
    this.country = country;
    this.countryCode = countryCode;
    this.email = email;
    this.fullName = fullName;
    this.gender = gender;
    this.language = language;
    this.likeCount = likeCount;
    this.location = location;
    this.mediaTweetCount = mediaTweetCount;
    this.mutedDirectMessages = mutedDirectMessages;
    this.notificationsCount = notificationsCount;
    this.mentionsCount = mentionsCount;
    this.password = password;
    this.passwordResetCode = passwordResetCode;
    this.phone = phone;
    this.pinnedTweetId = pinnedTweetId;
    this.privateProfile = privateProfile;
    this.profileCustomized = profileCustomized;
    this.profileStarted = profileStarted;
    this.registrationDate = registrationDate;
    this.role = role;
    this.authenticationProvider = authenticationProvider;
    this.tweetCount = tweetCount;
    this.unreadMessagesCount = unreadMessagesCount;
    this.username = username;
    this.wallpaper = wallpaper;
    this.website = website;
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return about;
    case 2: return activationCode;
    case 3: return active;
    case 4: return avatar;
    case 5: return backgroundColor;
    case 6: return colorScheme;
    case 7: return birthday;
    case 8: return country;
    case 9: return countryCode;
    case 10: return email;
    case 11: return fullName;
    case 12: return gender;
    case 13: return language;
    case 14: return likeCount;
    case 15: return location;
    case 16: return mediaTweetCount;
    case 17: return mutedDirectMessages;
    case 18: return notificationsCount;
    case 19: return mentionsCount;
    case 20: return password;
    case 21: return passwordResetCode;
    case 22: return phone;
    case 23: return pinnedTweetId;
    case 24: return privateProfile;
    case 25: return profileCustomized;
    case 26: return profileStarted;
    case 27: return registrationDate;
    case 28: return role;
    case 29: return authenticationProvider;
    case 30: return tweetCount;
    case 31: return unreadMessagesCount;
    case 32: return username;
    case 33: return wallpaper;
    case 34: return website;
    case 35: return createdAt;
    case 36: return updatedAt;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: about = value$ != null ? value$.toString() : null; break;
    case 2: activationCode = value$ != null ? value$.toString() : null; break;
    case 3: active = (java.lang.Boolean)value$; break;
    case 4: avatar = value$ != null ? value$.toString() : null; break;
    case 5: backgroundColor = value$ != null ? value$.toString() : null; break;
    case 6: colorScheme = value$ != null ? value$.toString() : null; break;
    case 7: birthday = value$ != null ? value$.toString() : null; break;
    case 8: country = value$ != null ? value$.toString() : null; break;
    case 9: countryCode = value$ != null ? value$.toString() : null; break;
    case 10: email = value$ != null ? value$.toString() : null; break;
    case 11: fullName = value$ != null ? value$.toString() : null; break;
    case 12: gender = value$ != null ? value$.toString() : null; break;
    case 13: language = value$ != null ? value$.toString() : null; break;
    case 14: likeCount = (java.lang.Integer)value$; break;
    case 15: location = value$ != null ? value$.toString() : null; break;
    case 16: mediaTweetCount = (java.lang.Long)value$; break;
    case 17: mutedDirectMessages = (java.lang.Boolean)value$; break;
    case 18: notificationsCount = (java.lang.Long)value$; break;
    case 19: mentionsCount = (java.lang.Long)value$; break;
    case 20: password = value$ != null ? value$.toString() : null; break;
    case 21: passwordResetCode = value$ != null ? value$.toString() : null; break;
    case 22: phone = (java.lang.Long)value$; break;
    case 23: pinnedTweetId = (java.lang.Long)value$; break;
    case 24: privateProfile = (java.lang.Boolean)value$; break;
    case 25: profileCustomized = (java.lang.Boolean)value$; break;
    case 26: profileStarted = (java.lang.Boolean)value$; break;
    case 27: registrationDate = value$ != null ? value$.toString() : null; break;
    case 28: role = value$ != null ? value$.toString() : null; break;
    case 29: authenticationProvider = value$ != null ? value$.toString() : null; break;
    case 30: tweetCount = (java.lang.Long)value$; break;
    case 31: unreadMessagesCount = (java.lang.Long)value$; break;
    case 32: username = value$ != null ? value$.toString() : null; break;
    case 33: wallpaper = value$ != null ? value$.toString() : null; break;
    case 34: website = value$ != null ? value$.toString() : null; break;
    case 35: createdAt = value$ != null ? value$.toString() : null; break;
    case 36: updatedAt = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'about' field.
   * @return The value of the 'about' field.
   */
  public java.lang.String getAbout() {
    return about;
  }


  /**
   * Sets the value of the 'about' field.
   * @param value the value to set.
   */
  public void setAbout(java.lang.String value) {
    this.about = value;
  }

  /**
   * Gets the value of the 'activationCode' field.
   * @return The value of the 'activationCode' field.
   */
  public java.lang.String getActivationCode() {
    return activationCode;
  }


  /**
   * Sets the value of the 'activationCode' field.
   * @param value the value to set.
   */
  public void setActivationCode(java.lang.String value) {
    this.activationCode = value;
  }

  /**
   * Gets the value of the 'active' field.
   * @return The value of the 'active' field.
   */
  public boolean getActive() {
    return active;
  }


  /**
   * Sets the value of the 'active' field.
   * @param value the value to set.
   */
  public void setActive(boolean value) {
    this.active = value;
  }

  /**
   * Gets the value of the 'avatar' field.
   * @return The value of the 'avatar' field.
   */
  public java.lang.String getAvatar() {
    return avatar;
  }


  /**
   * Sets the value of the 'avatar' field.
   * @param value the value to set.
   */
  public void setAvatar(java.lang.String value) {
    this.avatar = value;
  }

  /**
   * Gets the value of the 'backgroundColor' field.
   * @return The value of the 'backgroundColor' field.
   */
  public java.lang.String getBackgroundColor() {
    return backgroundColor;
  }


  /**
   * Sets the value of the 'backgroundColor' field.
   * @param value the value to set.
   */
  public void setBackgroundColor(java.lang.String value) {
    this.backgroundColor = value;
  }

  /**
   * Gets the value of the 'colorScheme' field.
   * @return The value of the 'colorScheme' field.
   */
  public java.lang.String getColorScheme() {
    return colorScheme;
  }


  /**
   * Sets the value of the 'colorScheme' field.
   * @param value the value to set.
   */
  public void setColorScheme(java.lang.String value) {
    this.colorScheme = value;
  }

  /**
   * Gets the value of the 'birthday' field.
   * @return The value of the 'birthday' field.
   */
  public java.lang.String getBirthday() {
    return birthday;
  }


  /**
   * Sets the value of the 'birthday' field.
   * @param value the value to set.
   */
  public void setBirthday(java.lang.String value) {
    this.birthday = value;
  }

  /**
   * Gets the value of the 'country' field.
   * @return The value of the 'country' field.
   */
  public java.lang.String getCountry() {
    return country;
  }


  /**
   * Sets the value of the 'country' field.
   * @param value the value to set.
   */
  public void setCountry(java.lang.String value) {
    this.country = value;
  }

  /**
   * Gets the value of the 'countryCode' field.
   * @return The value of the 'countryCode' field.
   */
  public java.lang.String getCountryCode() {
    return countryCode;
  }


  /**
   * Sets the value of the 'countryCode' field.
   * @param value the value to set.
   */
  public void setCountryCode(java.lang.String value) {
    this.countryCode = value;
  }

  /**
   * Gets the value of the 'email' field.
   * @return The value of the 'email' field.
   */
  public java.lang.String getEmail() {
    return email;
  }


  /**
   * Sets the value of the 'email' field.
   * @param value the value to set.
   */
  public void setEmail(java.lang.String value) {
    this.email = value;
  }

  /**
   * Gets the value of the 'fullName' field.
   * @return The value of the 'fullName' field.
   */
  public java.lang.String getFullName() {
    return fullName;
  }


  /**
   * Sets the value of the 'fullName' field.
   * @param value the value to set.
   */
  public void setFullName(java.lang.String value) {
    this.fullName = value;
  }

  /**
   * Gets the value of the 'gender' field.
   * @return The value of the 'gender' field.
   */
  public java.lang.String getGender() {
    return gender;
  }


  /**
   * Sets the value of the 'gender' field.
   * @param value the value to set.
   */
  public void setGender(java.lang.String value) {
    this.gender = value;
  }

  /**
   * Gets the value of the 'language' field.
   * @return The value of the 'language' field.
   */
  public java.lang.String getLanguage() {
    return language;
  }


  /**
   * Sets the value of the 'language' field.
   * @param value the value to set.
   */
  public void setLanguage(java.lang.String value) {
    this.language = value;
  }

  /**
   * Gets the value of the 'likeCount' field.
   * @return The value of the 'likeCount' field.
   */
  public int getLikeCount() {
    return likeCount;
  }


  /**
   * Sets the value of the 'likeCount' field.
   * @param value the value to set.
   */
  public void setLikeCount(int value) {
    this.likeCount = value;
  }

  /**
   * Gets the value of the 'location' field.
   * @return The value of the 'location' field.
   */
  public java.lang.String getLocation() {
    return location;
  }


  /**
   * Sets the value of the 'location' field.
   * @param value the value to set.
   */
  public void setLocation(java.lang.String value) {
    this.location = value;
  }

  /**
   * Gets the value of the 'mediaTweetCount' field.
   * @return The value of the 'mediaTweetCount' field.
   */
  public long getMediaTweetCount() {
    return mediaTweetCount;
  }


  /**
   * Sets the value of the 'mediaTweetCount' field.
   * @param value the value to set.
   */
  public void setMediaTweetCount(long value) {
    this.mediaTweetCount = value;
  }

  /**
   * Gets the value of the 'mutedDirectMessages' field.
   * @return The value of the 'mutedDirectMessages' field.
   */
  public boolean getMutedDirectMessages() {
    return mutedDirectMessages;
  }


  /**
   * Sets the value of the 'mutedDirectMessages' field.
   * @param value the value to set.
   */
  public void setMutedDirectMessages(boolean value) {
    this.mutedDirectMessages = value;
  }

  /**
   * Gets the value of the 'notificationsCount' field.
   * @return The value of the 'notificationsCount' field.
   */
  public long getNotificationsCount() {
    return notificationsCount;
  }


  /**
   * Sets the value of the 'notificationsCount' field.
   * @param value the value to set.
   */
  public void setNotificationsCount(long value) {
    this.notificationsCount = value;
  }

  /**
   * Gets the value of the 'mentionsCount' field.
   * @return The value of the 'mentionsCount' field.
   */
  public long getMentionsCount() {
    return mentionsCount;
  }


  /**
   * Sets the value of the 'mentionsCount' field.
   * @param value the value to set.
   */
  public void setMentionsCount(long value) {
    this.mentionsCount = value;
  }

  /**
   * Gets the value of the 'password' field.
   * @return The value of the 'password' field.
   */
  public java.lang.String getPassword() {
    return password;
  }


  /**
   * Sets the value of the 'password' field.
   * @param value the value to set.
   */
  public void setPassword(java.lang.String value) {
    this.password = value;
  }

  /**
   * Gets the value of the 'passwordResetCode' field.
   * @return The value of the 'passwordResetCode' field.
   */
  public java.lang.String getPasswordResetCode() {
    return passwordResetCode;
  }


  /**
   * Sets the value of the 'passwordResetCode' field.
   * @param value the value to set.
   */
  public void setPasswordResetCode(java.lang.String value) {
    this.passwordResetCode = value;
  }

  /**
   * Gets the value of the 'phone' field.
   * @return The value of the 'phone' field.
   */
  public java.lang.Long getPhone() {
    return phone;
  }


  /**
   * Sets the value of the 'phone' field.
   * @param value the value to set.
   */
  public void setPhone(java.lang.Long value) {
    this.phone = value;
  }

  /**
   * Gets the value of the 'pinnedTweetId' field.
   * @return The value of the 'pinnedTweetId' field.
   */
  public java.lang.Long getPinnedTweetId() {
    return pinnedTweetId;
  }


  /**
   * Sets the value of the 'pinnedTweetId' field.
   * @param value the value to set.
   */
  public void setPinnedTweetId(java.lang.Long value) {
    this.pinnedTweetId = value;
  }

  /**
   * Gets the value of the 'privateProfile' field.
   * @return The value of the 'privateProfile' field.
   */
  public boolean getPrivateProfile() {
    return privateProfile;
  }


  /**
   * Sets the value of the 'privateProfile' field.
   * @param value the value to set.
   */
  public void setPrivateProfile(boolean value) {
    this.privateProfile = value;
  }

  /**
   * Gets the value of the 'profileCustomized' field.
   * @return The value of the 'profileCustomized' field.
   */
  public boolean getProfileCustomized() {
    return profileCustomized;
  }


  /**
   * Sets the value of the 'profileCustomized' field.
   * @param value the value to set.
   */
  public void setProfileCustomized(boolean value) {
    this.profileCustomized = value;
  }

  /**
   * Gets the value of the 'profileStarted' field.
   * @return The value of the 'profileStarted' field.
   */
  public boolean getProfileStarted() {
    return profileStarted;
  }


  /**
   * Sets the value of the 'profileStarted' field.
   * @param value the value to set.
   */
  public void setProfileStarted(boolean value) {
    this.profileStarted = value;
  }

  /**
   * Gets the value of the 'registrationDate' field.
   * @return The value of the 'registrationDate' field.
   */
  public java.lang.String getRegistrationDate() {
    return registrationDate;
  }


  /**
   * Sets the value of the 'registrationDate' field.
   * @param value the value to set.
   */
  public void setRegistrationDate(java.lang.String value) {
    this.registrationDate = value;
  }

  /**
   * Gets the value of the 'role' field.
   * @return The value of the 'role' field.
   */
  public java.lang.String getRole() {
    return role;
  }


  /**
   * Sets the value of the 'role' field.
   * @param value the value to set.
   */
  public void setRole(java.lang.String value) {
    this.role = value;
  }

  /**
   * Gets the value of the 'authenticationProvider' field.
   * @return The value of the 'authenticationProvider' field.
   */
  public java.lang.String getAuthenticationProvider() {
    return authenticationProvider;
  }


  /**
   * Sets the value of the 'authenticationProvider' field.
   * @param value the value to set.
   */
  public void setAuthenticationProvider(java.lang.String value) {
    this.authenticationProvider = value;
  }

  /**
   * Gets the value of the 'tweetCount' field.
   * @return The value of the 'tweetCount' field.
   */
  public long getTweetCount() {
    return tweetCount;
  }


  /**
   * Sets the value of the 'tweetCount' field.
   * @param value the value to set.
   */
  public void setTweetCount(long value) {
    this.tweetCount = value;
  }

  /**
   * Gets the value of the 'unreadMessagesCount' field.
   * @return The value of the 'unreadMessagesCount' field.
   */
  public long getUnreadMessagesCount() {
    return unreadMessagesCount;
  }


  /**
   * Sets the value of the 'unreadMessagesCount' field.
   * @param value the value to set.
   */
  public void setUnreadMessagesCount(long value) {
    this.unreadMessagesCount = value;
  }

  /**
   * Gets the value of the 'username' field.
   * @return The value of the 'username' field.
   */
  public java.lang.String getUsername() {
    return username;
  }


  /**
   * Sets the value of the 'username' field.
   * @param value the value to set.
   */
  public void setUsername(java.lang.String value) {
    this.username = value;
  }

  /**
   * Gets the value of the 'wallpaper' field.
   * @return The value of the 'wallpaper' field.
   */
  public java.lang.String getWallpaper() {
    return wallpaper;
  }


  /**
   * Sets the value of the 'wallpaper' field.
   * @param value the value to set.
   */
  public void setWallpaper(java.lang.String value) {
    this.wallpaper = value;
  }

  /**
   * Gets the value of the 'website' field.
   * @return The value of the 'website' field.
   */
  public java.lang.String getWebsite() {
    return website;
  }


  /**
   * Sets the value of the 'website' field.
   * @param value the value to set.
   */
  public void setWebsite(java.lang.String value) {
    this.website = value;
  }

  /**
   * Gets the value of the 'createdAt' field.
   * @return The value of the 'createdAt' field.
   */
  public java.lang.String getCreatedAt() {
    return createdAt;
  }


  /**
   * Sets the value of the 'createdAt' field.
   * @param value the value to set.
   */
  public void setCreatedAt(java.lang.String value) {
    this.createdAt = value;
  }

  /**
   * Gets the value of the 'updatedAt' field.
   * @return The value of the 'updatedAt' field.
   */
  public java.lang.String getUpdatedAt() {
    return updatedAt;
  }


  /**
   * Sets the value of the 'updatedAt' field.
   * @param value the value to set.
   */
  public void setUpdatedAt(java.lang.String value) {
    this.updatedAt = value;
  }

  /**
   * Creates a new UserEvent RecordBuilder.
   * @return A new UserEvent RecordBuilder
   */
  public static com.twitter.ms.event.UserEvent.Builder newBuilder() {
    return new com.twitter.ms.event.UserEvent.Builder();
  }

  /**
   * Creates a new UserEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new UserEvent RecordBuilder
   */
  public static com.twitter.ms.event.UserEvent.Builder newBuilder(com.twitter.ms.event.UserEvent.Builder other) {
    if (other == null) {
      return new com.twitter.ms.event.UserEvent.Builder();
    } else {
      return new com.twitter.ms.event.UserEvent.Builder(other);
    }
  }

  /**
   * Creates a new UserEvent RecordBuilder by copying an existing UserEvent instance.
   * @param other The existing instance to copy.
   * @return A new UserEvent RecordBuilder
   */
  public static com.twitter.ms.event.UserEvent.Builder newBuilder(com.twitter.ms.event.UserEvent other) {
    if (other == null) {
      return new com.twitter.ms.event.UserEvent.Builder();
    } else {
      return new com.twitter.ms.event.UserEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for UserEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<UserEvent>
    implements org.apache.avro.data.RecordBuilder<UserEvent> {

    private long id;
    private java.lang.String about;
    private java.lang.String activationCode;
    private boolean active;
    private java.lang.String avatar;
    private java.lang.String backgroundColor;
    private java.lang.String colorScheme;
    private java.lang.String birthday;
    private java.lang.String country;
    private java.lang.String countryCode;
    private java.lang.String email;
    private java.lang.String fullName;
    private java.lang.String gender;
    private java.lang.String language;
    private int likeCount;
    private java.lang.String location;
    private long mediaTweetCount;
    private boolean mutedDirectMessages;
    private long notificationsCount;
    private long mentionsCount;
    private java.lang.String password;
    private java.lang.String passwordResetCode;
    private java.lang.Long phone;
    private java.lang.Long pinnedTweetId;
    private boolean privateProfile;
    private boolean profileCustomized;
    private boolean profileStarted;
    private java.lang.String registrationDate;
    private java.lang.String role;
    private java.lang.String authenticationProvider;
    private long tweetCount;
    private long unreadMessagesCount;
    private java.lang.String username;
    private java.lang.String wallpaper;
    private java.lang.String website;
    private java.lang.String createdAt;
    private java.lang.String updatedAt;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.twitter.ms.event.UserEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.about)) {
        this.about = data().deepCopy(fields()[1].schema(), other.about);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.activationCode)) {
        this.activationCode = data().deepCopy(fields()[2].schema(), other.activationCode);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.active)) {
        this.active = data().deepCopy(fields()[3].schema(), other.active);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.avatar)) {
        this.avatar = data().deepCopy(fields()[4].schema(), other.avatar);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.backgroundColor)) {
        this.backgroundColor = data().deepCopy(fields()[5].schema(), other.backgroundColor);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.colorScheme)) {
        this.colorScheme = data().deepCopy(fields()[6].schema(), other.colorScheme);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.birthday)) {
        this.birthday = data().deepCopy(fields()[7].schema(), other.birthday);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.country)) {
        this.country = data().deepCopy(fields()[8].schema(), other.country);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.countryCode)) {
        this.countryCode = data().deepCopy(fields()[9].schema(), other.countryCode);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.email)) {
        this.email = data().deepCopy(fields()[10].schema(), other.email);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.fullName)) {
        this.fullName = data().deepCopy(fields()[11].schema(), other.fullName);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.gender)) {
        this.gender = data().deepCopy(fields()[12].schema(), other.gender);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.language)) {
        this.language = data().deepCopy(fields()[13].schema(), other.language);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.likeCount)) {
        this.likeCount = data().deepCopy(fields()[14].schema(), other.likeCount);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.location)) {
        this.location = data().deepCopy(fields()[15].schema(), other.location);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.mediaTweetCount)) {
        this.mediaTweetCount = data().deepCopy(fields()[16].schema(), other.mediaTweetCount);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
      if (isValidValue(fields()[17], other.mutedDirectMessages)) {
        this.mutedDirectMessages = data().deepCopy(fields()[17].schema(), other.mutedDirectMessages);
        fieldSetFlags()[17] = other.fieldSetFlags()[17];
      }
      if (isValidValue(fields()[18], other.notificationsCount)) {
        this.notificationsCount = data().deepCopy(fields()[18].schema(), other.notificationsCount);
        fieldSetFlags()[18] = other.fieldSetFlags()[18];
      }
      if (isValidValue(fields()[19], other.mentionsCount)) {
        this.mentionsCount = data().deepCopy(fields()[19].schema(), other.mentionsCount);
        fieldSetFlags()[19] = other.fieldSetFlags()[19];
      }
      if (isValidValue(fields()[20], other.password)) {
        this.password = data().deepCopy(fields()[20].schema(), other.password);
        fieldSetFlags()[20] = other.fieldSetFlags()[20];
      }
      if (isValidValue(fields()[21], other.passwordResetCode)) {
        this.passwordResetCode = data().deepCopy(fields()[21].schema(), other.passwordResetCode);
        fieldSetFlags()[21] = other.fieldSetFlags()[21];
      }
      if (isValidValue(fields()[22], other.phone)) {
        this.phone = data().deepCopy(fields()[22].schema(), other.phone);
        fieldSetFlags()[22] = other.fieldSetFlags()[22];
      }
      if (isValidValue(fields()[23], other.pinnedTweetId)) {
        this.pinnedTweetId = data().deepCopy(fields()[23].schema(), other.pinnedTweetId);
        fieldSetFlags()[23] = other.fieldSetFlags()[23];
      }
      if (isValidValue(fields()[24], other.privateProfile)) {
        this.privateProfile = data().deepCopy(fields()[24].schema(), other.privateProfile);
        fieldSetFlags()[24] = other.fieldSetFlags()[24];
      }
      if (isValidValue(fields()[25], other.profileCustomized)) {
        this.profileCustomized = data().deepCopy(fields()[25].schema(), other.profileCustomized);
        fieldSetFlags()[25] = other.fieldSetFlags()[25];
      }
      if (isValidValue(fields()[26], other.profileStarted)) {
        this.profileStarted = data().deepCopy(fields()[26].schema(), other.profileStarted);
        fieldSetFlags()[26] = other.fieldSetFlags()[26];
      }
      if (isValidValue(fields()[27], other.registrationDate)) {
        this.registrationDate = data().deepCopy(fields()[27].schema(), other.registrationDate);
        fieldSetFlags()[27] = other.fieldSetFlags()[27];
      }
      if (isValidValue(fields()[28], other.role)) {
        this.role = data().deepCopy(fields()[28].schema(), other.role);
        fieldSetFlags()[28] = other.fieldSetFlags()[28];
      }
      if (isValidValue(fields()[29], other.authenticationProvider)) {
        this.authenticationProvider = data().deepCopy(fields()[29].schema(), other.authenticationProvider);
        fieldSetFlags()[29] = other.fieldSetFlags()[29];
      }
      if (isValidValue(fields()[30], other.tweetCount)) {
        this.tweetCount = data().deepCopy(fields()[30].schema(), other.tweetCount);
        fieldSetFlags()[30] = other.fieldSetFlags()[30];
      }
      if (isValidValue(fields()[31], other.unreadMessagesCount)) {
        this.unreadMessagesCount = data().deepCopy(fields()[31].schema(), other.unreadMessagesCount);
        fieldSetFlags()[31] = other.fieldSetFlags()[31];
      }
      if (isValidValue(fields()[32], other.username)) {
        this.username = data().deepCopy(fields()[32].schema(), other.username);
        fieldSetFlags()[32] = other.fieldSetFlags()[32];
      }
      if (isValidValue(fields()[33], other.wallpaper)) {
        this.wallpaper = data().deepCopy(fields()[33].schema(), other.wallpaper);
        fieldSetFlags()[33] = other.fieldSetFlags()[33];
      }
      if (isValidValue(fields()[34], other.website)) {
        this.website = data().deepCopy(fields()[34].schema(), other.website);
        fieldSetFlags()[34] = other.fieldSetFlags()[34];
      }
      if (isValidValue(fields()[35], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[35].schema(), other.createdAt);
        fieldSetFlags()[35] = other.fieldSetFlags()[35];
      }
      if (isValidValue(fields()[36], other.updatedAt)) {
        this.updatedAt = data().deepCopy(fields()[36].schema(), other.updatedAt);
        fieldSetFlags()[36] = other.fieldSetFlags()[36];
      }
    }

    /**
     * Creates a Builder by copying an existing UserEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.twitter.ms.event.UserEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.about)) {
        this.about = data().deepCopy(fields()[1].schema(), other.about);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.activationCode)) {
        this.activationCode = data().deepCopy(fields()[2].schema(), other.activationCode);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.active)) {
        this.active = data().deepCopy(fields()[3].schema(), other.active);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.avatar)) {
        this.avatar = data().deepCopy(fields()[4].schema(), other.avatar);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.backgroundColor)) {
        this.backgroundColor = data().deepCopy(fields()[5].schema(), other.backgroundColor);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.colorScheme)) {
        this.colorScheme = data().deepCopy(fields()[6].schema(), other.colorScheme);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.birthday)) {
        this.birthday = data().deepCopy(fields()[7].schema(), other.birthday);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.country)) {
        this.country = data().deepCopy(fields()[8].schema(), other.country);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.countryCode)) {
        this.countryCode = data().deepCopy(fields()[9].schema(), other.countryCode);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.email)) {
        this.email = data().deepCopy(fields()[10].schema(), other.email);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.fullName)) {
        this.fullName = data().deepCopy(fields()[11].schema(), other.fullName);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.gender)) {
        this.gender = data().deepCopy(fields()[12].schema(), other.gender);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.language)) {
        this.language = data().deepCopy(fields()[13].schema(), other.language);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.likeCount)) {
        this.likeCount = data().deepCopy(fields()[14].schema(), other.likeCount);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.location)) {
        this.location = data().deepCopy(fields()[15].schema(), other.location);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.mediaTweetCount)) {
        this.mediaTweetCount = data().deepCopy(fields()[16].schema(), other.mediaTweetCount);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.mutedDirectMessages)) {
        this.mutedDirectMessages = data().deepCopy(fields()[17].schema(), other.mutedDirectMessages);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.notificationsCount)) {
        this.notificationsCount = data().deepCopy(fields()[18].schema(), other.notificationsCount);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.mentionsCount)) {
        this.mentionsCount = data().deepCopy(fields()[19].schema(), other.mentionsCount);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.password)) {
        this.password = data().deepCopy(fields()[20].schema(), other.password);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.passwordResetCode)) {
        this.passwordResetCode = data().deepCopy(fields()[21].schema(), other.passwordResetCode);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.phone)) {
        this.phone = data().deepCopy(fields()[22].schema(), other.phone);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.pinnedTweetId)) {
        this.pinnedTweetId = data().deepCopy(fields()[23].schema(), other.pinnedTweetId);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.privateProfile)) {
        this.privateProfile = data().deepCopy(fields()[24].schema(), other.privateProfile);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.profileCustomized)) {
        this.profileCustomized = data().deepCopy(fields()[25].schema(), other.profileCustomized);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.profileStarted)) {
        this.profileStarted = data().deepCopy(fields()[26].schema(), other.profileStarted);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.registrationDate)) {
        this.registrationDate = data().deepCopy(fields()[27].schema(), other.registrationDate);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.role)) {
        this.role = data().deepCopy(fields()[28].schema(), other.role);
        fieldSetFlags()[28] = true;
      }
      if (isValidValue(fields()[29], other.authenticationProvider)) {
        this.authenticationProvider = data().deepCopy(fields()[29].schema(), other.authenticationProvider);
        fieldSetFlags()[29] = true;
      }
      if (isValidValue(fields()[30], other.tweetCount)) {
        this.tweetCount = data().deepCopy(fields()[30].schema(), other.tweetCount);
        fieldSetFlags()[30] = true;
      }
      if (isValidValue(fields()[31], other.unreadMessagesCount)) {
        this.unreadMessagesCount = data().deepCopy(fields()[31].schema(), other.unreadMessagesCount);
        fieldSetFlags()[31] = true;
      }
      if (isValidValue(fields()[32], other.username)) {
        this.username = data().deepCopy(fields()[32].schema(), other.username);
        fieldSetFlags()[32] = true;
      }
      if (isValidValue(fields()[33], other.wallpaper)) {
        this.wallpaper = data().deepCopy(fields()[33].schema(), other.wallpaper);
        fieldSetFlags()[33] = true;
      }
      if (isValidValue(fields()[34], other.website)) {
        this.website = data().deepCopy(fields()[34].schema(), other.website);
        fieldSetFlags()[34] = true;
      }
      if (isValidValue(fields()[35], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[35].schema(), other.createdAt);
        fieldSetFlags()[35] = true;
      }
      if (isValidValue(fields()[36], other.updatedAt)) {
        this.updatedAt = data().deepCopy(fields()[36].schema(), other.updatedAt);
        fieldSetFlags()[36] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'about' field.
      * @return The value.
      */
    public java.lang.String getAbout() {
      return about;
    }


    /**
      * Sets the value of the 'about' field.
      * @param value The value of 'about'.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder setAbout(java.lang.String value) {
      validate(fields()[1], value);
      this.about = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'about' field has been set.
      * @return True if the 'about' field has been set, false otherwise.
      */
    public boolean hasAbout() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'about' field.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder clearAbout() {
      about = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'activationCode' field.
      * @return The value.
      */
    public java.lang.String getActivationCode() {
      return activationCode;
    }


    /**
      * Sets the value of the 'activationCode' field.
      * @param value The value of 'activationCode'.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder setActivationCode(java.lang.String value) {
      validate(fields()[2], value);
      this.activationCode = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'activationCode' field has been set.
      * @return True if the 'activationCode' field has been set, false otherwise.
      */
    public boolean hasActivationCode() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'activationCode' field.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder clearActivationCode() {
      activationCode = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'active' field.
      * @return The value.
      */
    public boolean getActive() {
      return active;
    }


    /**
      * Sets the value of the 'active' field.
      * @param value The value of 'active'.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder setActive(boolean value) {
      validate(fields()[3], value);
      this.active = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'active' field has been set.
      * @return True if the 'active' field has been set, false otherwise.
      */
    public boolean hasActive() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'active' field.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder clearActive() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'avatar' field.
      * @return The value.
      */
    public java.lang.String getAvatar() {
      return avatar;
    }


    /**
      * Sets the value of the 'avatar' field.
      * @param value The value of 'avatar'.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder setAvatar(java.lang.String value) {
      validate(fields()[4], value);
      this.avatar = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'avatar' field has been set.
      * @return True if the 'avatar' field has been set, false otherwise.
      */
    public boolean hasAvatar() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'avatar' field.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder clearAvatar() {
      avatar = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'backgroundColor' field.
      * @return The value.
      */
    public java.lang.String getBackgroundColor() {
      return backgroundColor;
    }


    /**
      * Sets the value of the 'backgroundColor' field.
      * @param value The value of 'backgroundColor'.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder setBackgroundColor(java.lang.String value) {
      validate(fields()[5], value);
      this.backgroundColor = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'backgroundColor' field has been set.
      * @return True if the 'backgroundColor' field has been set, false otherwise.
      */
    public boolean hasBackgroundColor() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'backgroundColor' field.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder clearBackgroundColor() {
      backgroundColor = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'colorScheme' field.
      * @return The value.
      */
    public java.lang.String getColorScheme() {
      return colorScheme;
    }


    /**
      * Sets the value of the 'colorScheme' field.
      * @param value The value of 'colorScheme'.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder setColorScheme(java.lang.String value) {
      validate(fields()[6], value);
      this.colorScheme = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'colorScheme' field has been set.
      * @return True if the 'colorScheme' field has been set, false otherwise.
      */
    public boolean hasColorScheme() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'colorScheme' field.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder clearColorScheme() {
      colorScheme = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'birthday' field.
      * @return The value.
      */
    public java.lang.String getBirthday() {
      return birthday;
    }


    /**
      * Sets the value of the 'birthday' field.
      * @param value The value of 'birthday'.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder setBirthday(java.lang.String value) {
      validate(fields()[7], value);
      this.birthday = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'birthday' field has been set.
      * @return True if the 'birthday' field has been set, false otherwise.
      */
    public boolean hasBirthday() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'birthday' field.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder clearBirthday() {
      birthday = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'country' field.
      * @return The value.
      */
    public java.lang.String getCountry() {
      return country;
    }


    /**
      * Sets the value of the 'country' field.
      * @param value The value of 'country'.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder setCountry(java.lang.String value) {
      validate(fields()[8], value);
      this.country = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'country' field has been set.
      * @return True if the 'country' field has been set, false otherwise.
      */
    public boolean hasCountry() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'country' field.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder clearCountry() {
      country = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'countryCode' field.
      * @return The value.
      */
    public java.lang.String getCountryCode() {
      return countryCode;
    }


    /**
      * Sets the value of the 'countryCode' field.
      * @param value The value of 'countryCode'.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder setCountryCode(java.lang.String value) {
      validate(fields()[9], value);
      this.countryCode = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'countryCode' field has been set.
      * @return True if the 'countryCode' field has been set, false otherwise.
      */
    public boolean hasCountryCode() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'countryCode' field.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder clearCountryCode() {
      countryCode = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'email' field.
      * @return The value.
      */
    public java.lang.String getEmail() {
      return email;
    }


    /**
      * Sets the value of the 'email' field.
      * @param value The value of 'email'.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder setEmail(java.lang.String value) {
      validate(fields()[10], value);
      this.email = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'email' field has been set.
      * @return True if the 'email' field has been set, false otherwise.
      */
    public boolean hasEmail() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'email' field.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder clearEmail() {
      email = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'fullName' field.
      * @return The value.
      */
    public java.lang.String getFullName() {
      return fullName;
    }


    /**
      * Sets the value of the 'fullName' field.
      * @param value The value of 'fullName'.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder setFullName(java.lang.String value) {
      validate(fields()[11], value);
      this.fullName = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'fullName' field has been set.
      * @return True if the 'fullName' field has been set, false otherwise.
      */
    public boolean hasFullName() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'fullName' field.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder clearFullName() {
      fullName = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'gender' field.
      * @return The value.
      */
    public java.lang.String getGender() {
      return gender;
    }


    /**
      * Sets the value of the 'gender' field.
      * @param value The value of 'gender'.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder setGender(java.lang.String value) {
      validate(fields()[12], value);
      this.gender = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'gender' field has been set.
      * @return True if the 'gender' field has been set, false otherwise.
      */
    public boolean hasGender() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'gender' field.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder clearGender() {
      gender = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'language' field.
      * @return The value.
      */
    public java.lang.String getLanguage() {
      return language;
    }


    /**
      * Sets the value of the 'language' field.
      * @param value The value of 'language'.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder setLanguage(java.lang.String value) {
      validate(fields()[13], value);
      this.language = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'language' field has been set.
      * @return True if the 'language' field has been set, false otherwise.
      */
    public boolean hasLanguage() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'language' field.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder clearLanguage() {
      language = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'likeCount' field.
      * @return The value.
      */
    public int getLikeCount() {
      return likeCount;
    }


    /**
      * Sets the value of the 'likeCount' field.
      * @param value The value of 'likeCount'.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder setLikeCount(int value) {
      validate(fields()[14], value);
      this.likeCount = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'likeCount' field has been set.
      * @return True if the 'likeCount' field has been set, false otherwise.
      */
    public boolean hasLikeCount() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'likeCount' field.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder clearLikeCount() {
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'location' field.
      * @return The value.
      */
    public java.lang.String getLocation() {
      return location;
    }


    /**
      * Sets the value of the 'location' field.
      * @param value The value of 'location'.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder setLocation(java.lang.String value) {
      validate(fields()[15], value);
      this.location = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'location' field has been set.
      * @return True if the 'location' field has been set, false otherwise.
      */
    public boolean hasLocation() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'location' field.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder clearLocation() {
      location = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'mediaTweetCount' field.
      * @return The value.
      */
    public long getMediaTweetCount() {
      return mediaTweetCount;
    }


    /**
      * Sets the value of the 'mediaTweetCount' field.
      * @param value The value of 'mediaTweetCount'.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder setMediaTweetCount(long value) {
      validate(fields()[16], value);
      this.mediaTweetCount = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'mediaTweetCount' field has been set.
      * @return True if the 'mediaTweetCount' field has been set, false otherwise.
      */
    public boolean hasMediaTweetCount() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'mediaTweetCount' field.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder clearMediaTweetCount() {
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'mutedDirectMessages' field.
      * @return The value.
      */
    public boolean getMutedDirectMessages() {
      return mutedDirectMessages;
    }


    /**
      * Sets the value of the 'mutedDirectMessages' field.
      * @param value The value of 'mutedDirectMessages'.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder setMutedDirectMessages(boolean value) {
      validate(fields()[17], value);
      this.mutedDirectMessages = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'mutedDirectMessages' field has been set.
      * @return True if the 'mutedDirectMessages' field has been set, false otherwise.
      */
    public boolean hasMutedDirectMessages() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'mutedDirectMessages' field.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder clearMutedDirectMessages() {
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'notificationsCount' field.
      * @return The value.
      */
    public long getNotificationsCount() {
      return notificationsCount;
    }


    /**
      * Sets the value of the 'notificationsCount' field.
      * @param value The value of 'notificationsCount'.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder setNotificationsCount(long value) {
      validate(fields()[18], value);
      this.notificationsCount = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'notificationsCount' field has been set.
      * @return True if the 'notificationsCount' field has been set, false otherwise.
      */
    public boolean hasNotificationsCount() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'notificationsCount' field.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder clearNotificationsCount() {
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'mentionsCount' field.
      * @return The value.
      */
    public long getMentionsCount() {
      return mentionsCount;
    }


    /**
      * Sets the value of the 'mentionsCount' field.
      * @param value The value of 'mentionsCount'.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder setMentionsCount(long value) {
      validate(fields()[19], value);
      this.mentionsCount = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'mentionsCount' field has been set.
      * @return True if the 'mentionsCount' field has been set, false otherwise.
      */
    public boolean hasMentionsCount() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'mentionsCount' field.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder clearMentionsCount() {
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'password' field.
      * @return The value.
      */
    public java.lang.String getPassword() {
      return password;
    }


    /**
      * Sets the value of the 'password' field.
      * @param value The value of 'password'.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder setPassword(java.lang.String value) {
      validate(fields()[20], value);
      this.password = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'password' field has been set.
      * @return True if the 'password' field has been set, false otherwise.
      */
    public boolean hasPassword() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'password' field.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder clearPassword() {
      password = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'passwordResetCode' field.
      * @return The value.
      */
    public java.lang.String getPasswordResetCode() {
      return passwordResetCode;
    }


    /**
      * Sets the value of the 'passwordResetCode' field.
      * @param value The value of 'passwordResetCode'.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder setPasswordResetCode(java.lang.String value) {
      validate(fields()[21], value);
      this.passwordResetCode = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'passwordResetCode' field has been set.
      * @return True if the 'passwordResetCode' field has been set, false otherwise.
      */
    public boolean hasPasswordResetCode() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'passwordResetCode' field.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder clearPasswordResetCode() {
      passwordResetCode = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    /**
      * Gets the value of the 'phone' field.
      * @return The value.
      */
    public java.lang.Long getPhone() {
      return phone;
    }


    /**
      * Sets the value of the 'phone' field.
      * @param value The value of 'phone'.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder setPhone(java.lang.Long value) {
      validate(fields()[22], value);
      this.phone = value;
      fieldSetFlags()[22] = true;
      return this;
    }

    /**
      * Checks whether the 'phone' field has been set.
      * @return True if the 'phone' field has been set, false otherwise.
      */
    public boolean hasPhone() {
      return fieldSetFlags()[22];
    }


    /**
      * Clears the value of the 'phone' field.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder clearPhone() {
      phone = null;
      fieldSetFlags()[22] = false;
      return this;
    }

    /**
      * Gets the value of the 'pinnedTweetId' field.
      * @return The value.
      */
    public java.lang.Long getPinnedTweetId() {
      return pinnedTweetId;
    }


    /**
      * Sets the value of the 'pinnedTweetId' field.
      * @param value The value of 'pinnedTweetId'.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder setPinnedTweetId(java.lang.Long value) {
      validate(fields()[23], value);
      this.pinnedTweetId = value;
      fieldSetFlags()[23] = true;
      return this;
    }

    /**
      * Checks whether the 'pinnedTweetId' field has been set.
      * @return True if the 'pinnedTweetId' field has been set, false otherwise.
      */
    public boolean hasPinnedTweetId() {
      return fieldSetFlags()[23];
    }


    /**
      * Clears the value of the 'pinnedTweetId' field.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder clearPinnedTweetId() {
      pinnedTweetId = null;
      fieldSetFlags()[23] = false;
      return this;
    }

    /**
      * Gets the value of the 'privateProfile' field.
      * @return The value.
      */
    public boolean getPrivateProfile() {
      return privateProfile;
    }


    /**
      * Sets the value of the 'privateProfile' field.
      * @param value The value of 'privateProfile'.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder setPrivateProfile(boolean value) {
      validate(fields()[24], value);
      this.privateProfile = value;
      fieldSetFlags()[24] = true;
      return this;
    }

    /**
      * Checks whether the 'privateProfile' field has been set.
      * @return True if the 'privateProfile' field has been set, false otherwise.
      */
    public boolean hasPrivateProfile() {
      return fieldSetFlags()[24];
    }


    /**
      * Clears the value of the 'privateProfile' field.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder clearPrivateProfile() {
      fieldSetFlags()[24] = false;
      return this;
    }

    /**
      * Gets the value of the 'profileCustomized' field.
      * @return The value.
      */
    public boolean getProfileCustomized() {
      return profileCustomized;
    }


    /**
      * Sets the value of the 'profileCustomized' field.
      * @param value The value of 'profileCustomized'.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder setProfileCustomized(boolean value) {
      validate(fields()[25], value);
      this.profileCustomized = value;
      fieldSetFlags()[25] = true;
      return this;
    }

    /**
      * Checks whether the 'profileCustomized' field has been set.
      * @return True if the 'profileCustomized' field has been set, false otherwise.
      */
    public boolean hasProfileCustomized() {
      return fieldSetFlags()[25];
    }


    /**
      * Clears the value of the 'profileCustomized' field.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder clearProfileCustomized() {
      fieldSetFlags()[25] = false;
      return this;
    }

    /**
      * Gets the value of the 'profileStarted' field.
      * @return The value.
      */
    public boolean getProfileStarted() {
      return profileStarted;
    }


    /**
      * Sets the value of the 'profileStarted' field.
      * @param value The value of 'profileStarted'.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder setProfileStarted(boolean value) {
      validate(fields()[26], value);
      this.profileStarted = value;
      fieldSetFlags()[26] = true;
      return this;
    }

    /**
      * Checks whether the 'profileStarted' field has been set.
      * @return True if the 'profileStarted' field has been set, false otherwise.
      */
    public boolean hasProfileStarted() {
      return fieldSetFlags()[26];
    }


    /**
      * Clears the value of the 'profileStarted' field.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder clearProfileStarted() {
      fieldSetFlags()[26] = false;
      return this;
    }

    /**
      * Gets the value of the 'registrationDate' field.
      * @return The value.
      */
    public java.lang.String getRegistrationDate() {
      return registrationDate;
    }


    /**
      * Sets the value of the 'registrationDate' field.
      * @param value The value of 'registrationDate'.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder setRegistrationDate(java.lang.String value) {
      validate(fields()[27], value);
      this.registrationDate = value;
      fieldSetFlags()[27] = true;
      return this;
    }

    /**
      * Checks whether the 'registrationDate' field has been set.
      * @return True if the 'registrationDate' field has been set, false otherwise.
      */
    public boolean hasRegistrationDate() {
      return fieldSetFlags()[27];
    }


    /**
      * Clears the value of the 'registrationDate' field.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder clearRegistrationDate() {
      registrationDate = null;
      fieldSetFlags()[27] = false;
      return this;
    }

    /**
      * Gets the value of the 'role' field.
      * @return The value.
      */
    public java.lang.String getRole() {
      return role;
    }


    /**
      * Sets the value of the 'role' field.
      * @param value The value of 'role'.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder setRole(java.lang.String value) {
      validate(fields()[28], value);
      this.role = value;
      fieldSetFlags()[28] = true;
      return this;
    }

    /**
      * Checks whether the 'role' field has been set.
      * @return True if the 'role' field has been set, false otherwise.
      */
    public boolean hasRole() {
      return fieldSetFlags()[28];
    }


    /**
      * Clears the value of the 'role' field.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder clearRole() {
      role = null;
      fieldSetFlags()[28] = false;
      return this;
    }

    /**
      * Gets the value of the 'authenticationProvider' field.
      * @return The value.
      */
    public java.lang.String getAuthenticationProvider() {
      return authenticationProvider;
    }


    /**
      * Sets the value of the 'authenticationProvider' field.
      * @param value The value of 'authenticationProvider'.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder setAuthenticationProvider(java.lang.String value) {
      validate(fields()[29], value);
      this.authenticationProvider = value;
      fieldSetFlags()[29] = true;
      return this;
    }

    /**
      * Checks whether the 'authenticationProvider' field has been set.
      * @return True if the 'authenticationProvider' field has been set, false otherwise.
      */
    public boolean hasAuthenticationProvider() {
      return fieldSetFlags()[29];
    }


    /**
      * Clears the value of the 'authenticationProvider' field.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder clearAuthenticationProvider() {
      authenticationProvider = null;
      fieldSetFlags()[29] = false;
      return this;
    }

    /**
      * Gets the value of the 'tweetCount' field.
      * @return The value.
      */
    public long getTweetCount() {
      return tweetCount;
    }


    /**
      * Sets the value of the 'tweetCount' field.
      * @param value The value of 'tweetCount'.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder setTweetCount(long value) {
      validate(fields()[30], value);
      this.tweetCount = value;
      fieldSetFlags()[30] = true;
      return this;
    }

    /**
      * Checks whether the 'tweetCount' field has been set.
      * @return True if the 'tweetCount' field has been set, false otherwise.
      */
    public boolean hasTweetCount() {
      return fieldSetFlags()[30];
    }


    /**
      * Clears the value of the 'tweetCount' field.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder clearTweetCount() {
      fieldSetFlags()[30] = false;
      return this;
    }

    /**
      * Gets the value of the 'unreadMessagesCount' field.
      * @return The value.
      */
    public long getUnreadMessagesCount() {
      return unreadMessagesCount;
    }


    /**
      * Sets the value of the 'unreadMessagesCount' field.
      * @param value The value of 'unreadMessagesCount'.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder setUnreadMessagesCount(long value) {
      validate(fields()[31], value);
      this.unreadMessagesCount = value;
      fieldSetFlags()[31] = true;
      return this;
    }

    /**
      * Checks whether the 'unreadMessagesCount' field has been set.
      * @return True if the 'unreadMessagesCount' field has been set, false otherwise.
      */
    public boolean hasUnreadMessagesCount() {
      return fieldSetFlags()[31];
    }


    /**
      * Clears the value of the 'unreadMessagesCount' field.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder clearUnreadMessagesCount() {
      fieldSetFlags()[31] = false;
      return this;
    }

    /**
      * Gets the value of the 'username' field.
      * @return The value.
      */
    public java.lang.String getUsername() {
      return username;
    }


    /**
      * Sets the value of the 'username' field.
      * @param value The value of 'username'.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder setUsername(java.lang.String value) {
      validate(fields()[32], value);
      this.username = value;
      fieldSetFlags()[32] = true;
      return this;
    }

    /**
      * Checks whether the 'username' field has been set.
      * @return True if the 'username' field has been set, false otherwise.
      */
    public boolean hasUsername() {
      return fieldSetFlags()[32];
    }


    /**
      * Clears the value of the 'username' field.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder clearUsername() {
      username = null;
      fieldSetFlags()[32] = false;
      return this;
    }

    /**
      * Gets the value of the 'wallpaper' field.
      * @return The value.
      */
    public java.lang.String getWallpaper() {
      return wallpaper;
    }


    /**
      * Sets the value of the 'wallpaper' field.
      * @param value The value of 'wallpaper'.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder setWallpaper(java.lang.String value) {
      validate(fields()[33], value);
      this.wallpaper = value;
      fieldSetFlags()[33] = true;
      return this;
    }

    /**
      * Checks whether the 'wallpaper' field has been set.
      * @return True if the 'wallpaper' field has been set, false otherwise.
      */
    public boolean hasWallpaper() {
      return fieldSetFlags()[33];
    }


    /**
      * Clears the value of the 'wallpaper' field.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder clearWallpaper() {
      wallpaper = null;
      fieldSetFlags()[33] = false;
      return this;
    }

    /**
      * Gets the value of the 'website' field.
      * @return The value.
      */
    public java.lang.String getWebsite() {
      return website;
    }


    /**
      * Sets the value of the 'website' field.
      * @param value The value of 'website'.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder setWebsite(java.lang.String value) {
      validate(fields()[34], value);
      this.website = value;
      fieldSetFlags()[34] = true;
      return this;
    }

    /**
      * Checks whether the 'website' field has been set.
      * @return True if the 'website' field has been set, false otherwise.
      */
    public boolean hasWebsite() {
      return fieldSetFlags()[34];
    }


    /**
      * Clears the value of the 'website' field.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder clearWebsite() {
      website = null;
      fieldSetFlags()[34] = false;
      return this;
    }

    /**
      * Gets the value of the 'createdAt' field.
      * @return The value.
      */
    public java.lang.String getCreatedAt() {
      return createdAt;
    }


    /**
      * Sets the value of the 'createdAt' field.
      * @param value The value of 'createdAt'.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder setCreatedAt(java.lang.String value) {
      validate(fields()[35], value);
      this.createdAt = value;
      fieldSetFlags()[35] = true;
      return this;
    }

    /**
      * Checks whether the 'createdAt' field has been set.
      * @return True if the 'createdAt' field has been set, false otherwise.
      */
    public boolean hasCreatedAt() {
      return fieldSetFlags()[35];
    }


    /**
      * Clears the value of the 'createdAt' field.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder clearCreatedAt() {
      createdAt = null;
      fieldSetFlags()[35] = false;
      return this;
    }

    /**
      * Gets the value of the 'updatedAt' field.
      * @return The value.
      */
    public java.lang.String getUpdatedAt() {
      return updatedAt;
    }


    /**
      * Sets the value of the 'updatedAt' field.
      * @param value The value of 'updatedAt'.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder setUpdatedAt(java.lang.String value) {
      validate(fields()[36], value);
      this.updatedAt = value;
      fieldSetFlags()[36] = true;
      return this;
    }

    /**
      * Checks whether the 'updatedAt' field has been set.
      * @return True if the 'updatedAt' field has been set, false otherwise.
      */
    public boolean hasUpdatedAt() {
      return fieldSetFlags()[36];
    }


    /**
      * Clears the value of the 'updatedAt' field.
      * @return This builder.
      */
    public com.twitter.ms.event.UserEvent.Builder clearUpdatedAt() {
      updatedAt = null;
      fieldSetFlags()[36] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public UserEvent build() {
      try {
        UserEvent record = new UserEvent();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.about = fieldSetFlags()[1] ? this.about : (java.lang.String) defaultValue(fields()[1]);
        record.activationCode = fieldSetFlags()[2] ? this.activationCode : (java.lang.String) defaultValue(fields()[2]);
        record.active = fieldSetFlags()[3] ? this.active : (java.lang.Boolean) defaultValue(fields()[3]);
        record.avatar = fieldSetFlags()[4] ? this.avatar : (java.lang.String) defaultValue(fields()[4]);
        record.backgroundColor = fieldSetFlags()[5] ? this.backgroundColor : (java.lang.String) defaultValue(fields()[5]);
        record.colorScheme = fieldSetFlags()[6] ? this.colorScheme : (java.lang.String) defaultValue(fields()[6]);
        record.birthday = fieldSetFlags()[7] ? this.birthday : (java.lang.String) defaultValue(fields()[7]);
        record.country = fieldSetFlags()[8] ? this.country : (java.lang.String) defaultValue(fields()[8]);
        record.countryCode = fieldSetFlags()[9] ? this.countryCode : (java.lang.String) defaultValue(fields()[9]);
        record.email = fieldSetFlags()[10] ? this.email : (java.lang.String) defaultValue(fields()[10]);
        record.fullName = fieldSetFlags()[11] ? this.fullName : (java.lang.String) defaultValue(fields()[11]);
        record.gender = fieldSetFlags()[12] ? this.gender : (java.lang.String) defaultValue(fields()[12]);
        record.language = fieldSetFlags()[13] ? this.language : (java.lang.String) defaultValue(fields()[13]);
        record.likeCount = fieldSetFlags()[14] ? this.likeCount : (java.lang.Integer) defaultValue(fields()[14]);
        record.location = fieldSetFlags()[15] ? this.location : (java.lang.String) defaultValue(fields()[15]);
        record.mediaTweetCount = fieldSetFlags()[16] ? this.mediaTweetCount : (java.lang.Long) defaultValue(fields()[16]);
        record.mutedDirectMessages = fieldSetFlags()[17] ? this.mutedDirectMessages : (java.lang.Boolean) defaultValue(fields()[17]);
        record.notificationsCount = fieldSetFlags()[18] ? this.notificationsCount : (java.lang.Long) defaultValue(fields()[18]);
        record.mentionsCount = fieldSetFlags()[19] ? this.mentionsCount : (java.lang.Long) defaultValue(fields()[19]);
        record.password = fieldSetFlags()[20] ? this.password : (java.lang.String) defaultValue(fields()[20]);
        record.passwordResetCode = fieldSetFlags()[21] ? this.passwordResetCode : (java.lang.String) defaultValue(fields()[21]);
        record.phone = fieldSetFlags()[22] ? this.phone : (java.lang.Long) defaultValue(fields()[22]);
        record.pinnedTweetId = fieldSetFlags()[23] ? this.pinnedTweetId : (java.lang.Long) defaultValue(fields()[23]);
        record.privateProfile = fieldSetFlags()[24] ? this.privateProfile : (java.lang.Boolean) defaultValue(fields()[24]);
        record.profileCustomized = fieldSetFlags()[25] ? this.profileCustomized : (java.lang.Boolean) defaultValue(fields()[25]);
        record.profileStarted = fieldSetFlags()[26] ? this.profileStarted : (java.lang.Boolean) defaultValue(fields()[26]);
        record.registrationDate = fieldSetFlags()[27] ? this.registrationDate : (java.lang.String) defaultValue(fields()[27]);
        record.role = fieldSetFlags()[28] ? this.role : (java.lang.String) defaultValue(fields()[28]);
        record.authenticationProvider = fieldSetFlags()[29] ? this.authenticationProvider : (java.lang.String) defaultValue(fields()[29]);
        record.tweetCount = fieldSetFlags()[30] ? this.tweetCount : (java.lang.Long) defaultValue(fields()[30]);
        record.unreadMessagesCount = fieldSetFlags()[31] ? this.unreadMessagesCount : (java.lang.Long) defaultValue(fields()[31]);
        record.username = fieldSetFlags()[32] ? this.username : (java.lang.String) defaultValue(fields()[32]);
        record.wallpaper = fieldSetFlags()[33] ? this.wallpaper : (java.lang.String) defaultValue(fields()[33]);
        record.website = fieldSetFlags()[34] ? this.website : (java.lang.String) defaultValue(fields()[34]);
        record.createdAt = fieldSetFlags()[35] ? this.createdAt : (java.lang.String) defaultValue(fields()[35]);
        record.updatedAt = fieldSetFlags()[36] ? this.updatedAt : (java.lang.String) defaultValue(fields()[36]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<UserEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<UserEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<UserEvent>
    READER$ = (org.apache.avro.io.DatumReader<UserEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.id);

    if (this.about == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.about);
    }

    if (this.activationCode == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.activationCode);
    }

    out.writeBoolean(this.active);

    if (this.avatar == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.avatar);
    }

    out.writeString(this.backgroundColor);

    out.writeString(this.colorScheme);

    if (this.birthday == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.birthday);
    }

    if (this.country == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.country);
    }

    if (this.countryCode == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.countryCode);
    }

    out.writeString(this.email);

    out.writeString(this.fullName);

    if (this.gender == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.gender);
    }

    if (this.language == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.language);
    }

    out.writeInt(this.likeCount);

    if (this.location == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.location);
    }

    out.writeLong(this.mediaTweetCount);

    out.writeBoolean(this.mutedDirectMessages);

    out.writeLong(this.notificationsCount);

    out.writeLong(this.mentionsCount);

    if (this.password == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.password);
    }

    if (this.passwordResetCode == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.passwordResetCode);
    }

    if (this.phone == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.phone);
    }

    if (this.pinnedTweetId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.pinnedTweetId);
    }

    out.writeBoolean(this.privateProfile);

    out.writeBoolean(this.profileCustomized);

    out.writeBoolean(this.profileStarted);

    out.writeString(this.registrationDate);

    out.writeString(this.role);

    if (this.authenticationProvider == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.authenticationProvider);
    }

    out.writeLong(this.tweetCount);

    out.writeLong(this.unreadMessagesCount);

    out.writeString(this.username);

    if (this.wallpaper == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.wallpaper);
    }

    if (this.website == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.website);
    }

    out.writeString(this.createdAt);

    out.writeString(this.updatedAt);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readLong();

      if (in.readIndex() != 1) {
        in.readNull();
        this.about = null;
      } else {
        this.about = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.activationCode = null;
      } else {
        this.activationCode = in.readString();
      }

      this.active = in.readBoolean();

      if (in.readIndex() != 1) {
        in.readNull();
        this.avatar = null;
      } else {
        this.avatar = in.readString();
      }

      this.backgroundColor = in.readString();

      this.colorScheme = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.birthday = null;
      } else {
        this.birthday = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.country = null;
      } else {
        this.country = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.countryCode = null;
      } else {
        this.countryCode = in.readString();
      }

      this.email = in.readString();

      this.fullName = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.gender = null;
      } else {
        this.gender = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.language = null;
      } else {
        this.language = in.readString();
      }

      this.likeCount = in.readInt();

      if (in.readIndex() != 1) {
        in.readNull();
        this.location = null;
      } else {
        this.location = in.readString();
      }

      this.mediaTweetCount = in.readLong();

      this.mutedDirectMessages = in.readBoolean();

      this.notificationsCount = in.readLong();

      this.mentionsCount = in.readLong();

      if (in.readIndex() != 1) {
        in.readNull();
        this.password = null;
      } else {
        this.password = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.passwordResetCode = null;
      } else {
        this.passwordResetCode = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.phone = null;
      } else {
        this.phone = in.readLong();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.pinnedTweetId = null;
      } else {
        this.pinnedTweetId = in.readLong();
      }

      this.privateProfile = in.readBoolean();

      this.profileCustomized = in.readBoolean();

      this.profileStarted = in.readBoolean();

      this.registrationDate = in.readString();

      this.role = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.authenticationProvider = null;
      } else {
        this.authenticationProvider = in.readString();
      }

      this.tweetCount = in.readLong();

      this.unreadMessagesCount = in.readLong();

      this.username = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.wallpaper = null;
      } else {
        this.wallpaper = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.website = null;
      } else {
        this.website = in.readString();
      }

      this.createdAt = in.readString();

      this.updatedAt = in.readString();

    } else {
      for (int i = 0; i < 37; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readLong();
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.about = null;
          } else {
            this.about = in.readString();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.activationCode = null;
          } else {
            this.activationCode = in.readString();
          }
          break;

        case 3:
          this.active = in.readBoolean();
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.avatar = null;
          } else {
            this.avatar = in.readString();
          }
          break;

        case 5:
          this.backgroundColor = in.readString();
          break;

        case 6:
          this.colorScheme = in.readString();
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.birthday = null;
          } else {
            this.birthday = in.readString();
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.country = null;
          } else {
            this.country = in.readString();
          }
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.countryCode = null;
          } else {
            this.countryCode = in.readString();
          }
          break;

        case 10:
          this.email = in.readString();
          break;

        case 11:
          this.fullName = in.readString();
          break;

        case 12:
          if (in.readIndex() != 1) {
            in.readNull();
            this.gender = null;
          } else {
            this.gender = in.readString();
          }
          break;

        case 13:
          if (in.readIndex() != 1) {
            in.readNull();
            this.language = null;
          } else {
            this.language = in.readString();
          }
          break;

        case 14:
          this.likeCount = in.readInt();
          break;

        case 15:
          if (in.readIndex() != 1) {
            in.readNull();
            this.location = null;
          } else {
            this.location = in.readString();
          }
          break;

        case 16:
          this.mediaTweetCount = in.readLong();
          break;

        case 17:
          this.mutedDirectMessages = in.readBoolean();
          break;

        case 18:
          this.notificationsCount = in.readLong();
          break;

        case 19:
          this.mentionsCount = in.readLong();
          break;

        case 20:
          if (in.readIndex() != 1) {
            in.readNull();
            this.password = null;
          } else {
            this.password = in.readString();
          }
          break;

        case 21:
          if (in.readIndex() != 1) {
            in.readNull();
            this.passwordResetCode = null;
          } else {
            this.passwordResetCode = in.readString();
          }
          break;

        case 22:
          if (in.readIndex() != 1) {
            in.readNull();
            this.phone = null;
          } else {
            this.phone = in.readLong();
          }
          break;

        case 23:
          if (in.readIndex() != 1) {
            in.readNull();
            this.pinnedTweetId = null;
          } else {
            this.pinnedTweetId = in.readLong();
          }
          break;

        case 24:
          this.privateProfile = in.readBoolean();
          break;

        case 25:
          this.profileCustomized = in.readBoolean();
          break;

        case 26:
          this.profileStarted = in.readBoolean();
          break;

        case 27:
          this.registrationDate = in.readString();
          break;

        case 28:
          this.role = in.readString();
          break;

        case 29:
          if (in.readIndex() != 1) {
            in.readNull();
            this.authenticationProvider = null;
          } else {
            this.authenticationProvider = in.readString();
          }
          break;

        case 30:
          this.tweetCount = in.readLong();
          break;

        case 31:
          this.unreadMessagesCount = in.readLong();
          break;

        case 32:
          this.username = in.readString();
          break;

        case 33:
          if (in.readIndex() != 1) {
            in.readNull();
            this.wallpaper = null;
          } else {
            this.wallpaper = in.readString();
          }
          break;

        case 34:
          if (in.readIndex() != 1) {
            in.readNull();
            this.website = null;
          } else {
            this.website = in.readString();
          }
          break;

        case 35:
          this.createdAt = in.readString();
          break;

        case 36:
          this.updatedAt = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










