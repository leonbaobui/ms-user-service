management:
  trace:
    enabled: true
    include: AUTHORIZATION_HEADER, COOKIE_HEADERS, PRINCIPAL, REMOTE_ADDRESS, REQUEST_HEADERS, RESPONSE_HEADERS, SESSION_ID, TIME_TAKEN
  endpoints:
    web:
      exposure:
        include: '*'
logging:
  level:
    org.springframework.web.filter.CommonsRequestLogging: DEBUG
    org.springframework.web.HttpLogging: TRACE
    reactor.netty.http.server: TRACE
    reactor.netty.http.client: TRACE
server:
  port : 443
  forward-headers-strategy: framework
  servlet:
    context-path: /ms-user-service
#hostname: ms-user-service:8081
spring:
  application:
    name: ms-user-service
  flyway:
    enabled: false
  jpa:
    database: POSTGRESQL
    show-sql: true
    hibernate:
#      This config will override the flyway because it will drop the user schema flyway
#      ddl-auto: create-drop
  datasource:
    platform: postgres
    url: jdbc:postgresql://ep-cold-mud-a1zdq33b-pooler.ap-southeast-1.aws.neon.tech/ms_user_service?sslmode=require
    username: ${POSTGRESQL_USERNAME}
    password: ${POSTGRESQL_PASSWORD}
    driverClassName: org.postgresql.Driver
  neo4j:
    uri: ${NEO4J_URI}
    authentication:
      username: ${NEO4J_USERNAME}
      password: ${NEO4J_PASSWORD}
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVER}
    properties:
      schema.registry.url: ${SCHEMA_REGISTRY_SERVER}
      auto.register.schemas: true
      value.subject.name.strategy: io.confluent.kafka.serializers.subject.TopicNameStrategy
      key.subject.name.strategy: io.confluent.kafka.serializers.subject.TopicNameStrategy
    producer:
      key-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
    consumer:
      group-id: user
  rabbitmq:
    addresses: amqps://${RABBITMQ_USERNAME}:${RABBITMQ_PASSWORD}@armadillo.rmq.cloudamqp.com/${RABBITMQ_USERNAME}
  data:
    redis:
      host: singapore-redis.render.com
      username: ${REDIS_USERNAME}
      password: ${REDIS_PASSWORD}
      port: '6379'
      database: '0'
      timeout: '60000'
      ssl:
        enabled: true

  security:
    oauth2:
      client:
        authorized:
          redirect-uri:
            - https://frontend-twitter.onrender.com/oauth2/redirect
        registration:
          google:
            redirectUri: "${MS_GATEWAY_URL}/ui/v1/auth/oauth2/callback/{registrationId}"
            client-id: ${GOOGLE_OAUTH2_CLIENT_ID}
            client-secret: ${GOOGLE_OAUTH2_CLIENT_SECRET}
            scope:
              - email
              - profile

rabbitmq:
  internal-mail:
    exchanges: internal.exchange
    routing-keys: internal.mail.routing-key

jwt:
  secret: ${JWT_SECRET}

service:
  gateway-url: ${MS_GATEWAY_URL}

eureka:
  instance:
    hostname: ${MS_USER_HOST} # Public domain name
    securePort: 443  # Standard HTTP port
    securePortEnabled: true  # Enable if you're using HTTPS
    nonSecurePortEnabled: false
    preferIpAddress: false  # Use the hostname instead of the IP address
    statusPageUrlPath: /actuator/info  # Default status page path
    healthCheckUrlPath: /actuator/health  # Default health check path
  client:
    serviceUrl:
      defaultZone: "${MS_EUREKA_URL}/eureka"
    fetch-registry: true
    register-with-eureka: true
  # instance:
  #   hostname: ${EUREKA_HOST:localhost}